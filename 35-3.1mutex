#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#include <string.h>

#define NLOOP 5000
int counter;

pthread_mutex_t counter_mutex = PTHREAD_MUTEX_INITIALIZER;

void *doit(void *vptr);


void *doit(void *vptr)
{
    int i; 

    for (i = 0; i < NLOOP; i++) {
        pthread_mutex_lock(&counter_mutex);

        printf("thread id: %d,  counter: %d \n", (unsigned int)pthread_self(), counter);
        counter++;

        pthread_mutex_unlock(&counter_mutex);

    }

    return NULL;  
}

int main(void)
{
    pthread_t tidA;
    pthread_t tidB;
    
    pthread_create(&tidA, NULL, doit, NULL);
    pthread_create(&tidB, NULL, doit, NULL);

    printf("tidA: %d, tidB: %d \n", (unsigned int)tidA, (unsigned int)tidA);

    /* wait for both threads to terminate */
    pthread_join(tidA, NULL);
    pthread_join(tidB, NULL);


    return 0;
}
